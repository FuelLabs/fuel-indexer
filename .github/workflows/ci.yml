name: CI

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]

env:
  DATABASE_URL: postgres://postgres:my-secret@localhost:5432
  DASEL_VERSION: https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  REGISTRY: ghcr.io
  SQLX_OFFLINE: true

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  cargo-toml-fmt-check:
    needs:
      - cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - name: Install Cargo.toml linter
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-toml-lint
          version: '0.1'
      - name: Run Cargo.toml linter
        run: git ls-files | grep Cargo.toml$ | xargs --verbose -n 1 cargo-toml-lint

  get-workspace-members:
    needs: 
      - cancel-previous-runs
      - cargo-toml-fmt-check
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.set-members.outputs.members }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - id: set-members
        run: |
          # install dasel
          curl -sSLf "$DASEL_VERSION" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          members=$(cat Cargo.toml | dasel -r toml -w json 'workspace.members' | jq -r ".[]" | xargs -I '{}' dasel -f {}/Cargo.toml 'package.name' | jq -R '[.]' | jq -s -c 'add')
          echo "members=$members" >> $GITHUB_OUTPUT

  mdbook-build:
    needs:
      - cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - name: mdbook build
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.4.17'

  mdbook-lint:
    needs:
      - cancel-previous-runs
      - mdbook-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: |
          npm install -g markdownlint-cli@0.31.1
          markdownlint --config .markdownlintrc **/*.md docs/src/

  cargo-unused-deps-check:
    needs:
      - cancel-previous-runs
      - cargo-toml-fmt-check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          # `cargo-udeps` requires nightly to run
          toolchain: nightly
          default: true
      - uses: Swatinem/rust-cache@v1
      - run: cargo install sqlx-cli
      - run: bash scripts/run_migrations.bash
      - name: Install cargo-udeps
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-udeps
      - name: Check Unused Deps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: --locked --all-targets --all-features

  cargo-build-wasm-example:
    needs:
      - cancel-previous-runs
      - cargo-toml-fmt-check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        name: Cargo Build WASM Example
        with:
          command: build
          args: -p fuel-indexer-test --release --target wasm32-unknown-unknown

  cargo-verifications:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    needs:
      - cancel-previous-runs
      - cargo-build-wasm-example
      - get-workspace-members
    if: github.event_name != 'release' && github.event.action != 'published'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.get-workspace-members.outputs.members) }}
        include:
          - command: fmt
            args: --all --verbose -- --check
          - command: clippy
            args: --all-features --all-targets
          - command: check
            args: --all-features --locked --workspace --all-targets
          - command: build
            args: --locked --workspace --all-features --all-targets
          - command: test
            args: --locked --workspace
          - command: test
            args: --locked --all-targets --no-default-features --workspace

    # disallow any job that takes longer than 45 minutes
    timeout-minutes: 45
    continue-on-error: ${{ matrix.skip-error || false }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo install sqlx-cli
      - run: bash scripts/run_migrations.bash
      - name: ${{ matrix.command }} ${{ matrix.args }}
        uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.command }}
          args: ${{ matrix.args }}
      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        if: always() && github.ref == 'refs/heads/master'
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}
          RUSTFLAGS: -D warnings

  # TODO: https://github.com/FuelLabs/fuel-indexer/issues/269
  cargo-test-workspace-all-features:
    if: github.event_name != 'release' && github.event.action != 'published'
    needs:
      - cancel-previous-runs
      - cargo-build-wasm-example
      - get-workspace-members
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v1
      - run: cargo install sqlx-cli
      - run: bash scripts/run_migrations.bash

      - name: Build fuel-indexer and fuel-indexer-test-web
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p fuel-indexer -p fuel-indexer-test-web --locked --release
        env:
          RUSTFLAGS: '-D warnings'

      - name: Install wasm-snip
        run: cargo install wasm-snip
      - name: Build updated WASM test module
        run: bash scripts/utils/build_test_wasm_module.bash
      - name: Start test web components
        run: bash scripts/utils/start_test_components.bash

      - name: Cargo Test Workspace
        uses: actions-rs/cargo@v1
      - run: cargo test --locked --workspace --all-features --all-targets
      - run: bash scripts/utils/kill_test_components.bash

  publish-docker-image:
    needs:
      - cancel-previous-runs
    if: github.event_name == 'release' || github.event.action == 'published'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # This is a way to make this job run after publish-crates even if it's skipped on master or pr branches
      # https://stackoverflow.com/a/69252812/680811
      - name: fail if any dependent jobs failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/fuellabs/fuel-indexer
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{raw}}
          flavor: |
            latest=${{ github.ref == 'refs/heads/master' }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the image to ghcr.io
        uses: docker/build-push-action@v2
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        if: always() && (github.ref == 'refs/heads/master' || github.ref_type == 'tag')
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  publish-fuel-indexer-binaries:
    runs-on: ${{ matrix.job.os }}
    needs:
      - cancel-previous-runs
      - publish-docker-image
    if: github.event_name == 'release' && github.event.action == 'published'
     # Only do this job if publishing a release
    strategy:
      matrix:
        job:
          # TODO: Add other targets as needed, using fuel-core as reference
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            cross_image: x86_64-linux-gnu
          - os: ubuntu-latest
            platform: linux-arm
            target: aarch64-unknown-linux-gnu
            cross_image: aarch64-linux-gnu
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
          - os: macos-latest
            platform: darwin-arm
            target: aarch64-apple-darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        if: matrix.job.cross_image
        uses: docker/setup-buildx-action@v1

      - name: Setup custom cross env ${{ matrix.job.cross_image }}
        if: matrix.job.cross_image
        uses: docker/build-push-action@v2
        with:
          context: ci
          file: ci/Dockerfile.${{ matrix.job.target }}-clang
          tags: ${{ matrix.job.cross_image }}:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install packages (macOS)
        if: matrix.job.os == 'macos-latest'
        run: |
          ci/macos-install-packages.sh

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - name: Install cross
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cross
          cache-key: '${{ matrix.job.target }}'

      - name: Build fuel-indexer
        run: |
          cross build --profile=release --target ${{ matrix.job.target }} -p fuel-indexer -p fuel-indexer-api-server -p forc-index

      - name: Strip release binary linux x86_64
        if: matrix.job.platform == 'linux'
        run: |
          strip "target/${{ matrix.job.target }}/release/fuel-indexer"
          strip "target/${{ matrix.job.target }}/release/fuel-indexer-api-server"
          strip "target/${{ matrix.job.target }}/release/forc-index"

      - name: Strip release binary aarch64-linux-gnu
        if: matrix.job.target == 'aarch64-unknown-linux-gnu'
        run: |
          docker run --rm -v \
          "$PWD/target:/target:Z" \
          aarch64-linux-gnu:latest \
          aarch64-linux-gnu-strip \
          /target/aarch64-unknown-linux-gnu/release/fuel-indexer

          docker run --rm -v \
          "$PWD/target:/target:Z" \
          aarch64-linux-gnu:latest \
          aarch64-linux-gnu-strip \
          /target/aarch64-unknown-linux-gnu/release/fuel-indexer-api-server

          docker run --rm -v \
          "$PWD/target:/target:Z" \
          aarch64-linux-gnu:latest \
          aarch64-linux-gnu-strip \
          /target/aarch64-unknown-linux-gnu/release/forc-index

      - name: Strip release binary mac
        if: matrix.job.os == 'macos-latest'
        run: |
          strip -x "target/${{ matrix.job.target }}/release/fuel-indexer"
          strip -x "target/${{ matrix.job.target }}/release/fuel-indexer-api-server"
          strip -x "target/${{ matrix.job.target }}/release/forc-index"

      - name: Prepare Binary Artifact
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
        run: |
          # trim refs/tags/ prefix
          FUEL_INDEXER_VERSION="${GITHUB_REF#refs/tags/}"

          # optionally trim v from tag prefix
          FUEL_INDEXER_VERSION="${FUEL_INDEXER_VERSION#v}"
          echo "version is: $FUEL_INDEXER_VERSION"

          # setup artifact filename
          INDEXER_ARTIFACT="fuel-indexer-$FUEL_INDEXER_VERSION-${{ env.TARGET }}"
          API_SERVER_ARTIFACT="fuel-indexer-api-server-$FUEL_INDEXER_VERSION-${{ env.TARGET }}"
          FORC_INDEX_ARTIFACT="forc-index-$FUEL_INDEXER_VERSION-${{ env.TARGET }}"
          INDEXER_ZIP_FILE_NAME="$INDEXER_ARTIFACT.tar.gz"
          API_SERVER_ZIP_FILE_NAME="$API_SERVER_ARTIFACT.tar.gz"
          FORC_INDEX_ZIP_FILE_NAME="$FORC_INDEX_ARTIFACT.tar.gz"
          echo "INDEXER_ZIP_FILE_NAME=$INDEXER_ZIP_FILE_NAME" >> $GITHUB_ENV
          echo "API_SERVER_ZIP_FILE_NAME=$API_SERVER_ZIP_FILE_NAME" >> $GITHUB_ENV
          echo "FORC_INDEX_ZIP_FILE_NAME=$FORC_INDEX_ZIP_FILE_NAME" >> $GITHUB_ENV

          # create zip file
          mkdir -pv "$INDEXER_ARTIFACT"
          mkdir -pv "$API_SERVER_ARTIFACT"
          mkdir -pv "$FORC_INDEX_ARTIFACT"
          cp "target/${{ matrix.job.target }}/release/fuel-indexer" "$INDEXER_ARTIFACT"
          cp "target/${{ matrix.job.target }}/release/fuel-indexer-api-server" "$API_SERVER_ARTIFACT"
          cp "target/${{ matrix.job.target }}/release/forc-index" "$FORC_INDEX_ARTIFACT"
          tar -czvf "$INDEXER_ZIP_FILE_NAME" "$INDEXER_ARTIFACT"
          tar -czvf "$API_SERVER_ZIP_FILE_NAME" "$API_SERVER_ARTIFACT"
          tar -czvf "$FORC_INDEX_ZIP_FILE_NAME" "$FORC_INDEX_ARTIFACT"

      - name: Upload Indexer Binary Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.INDEXER_ZIP_FILE_NAME }}
          asset_name: ${{ env.INDEXER_ZIP_FILE_NAME }}
          asset_content_type: application/gzip

      - name: Upload Api Server Binary Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.API_SERVER_ZIP_FILE_NAME }}
          asset_name: ${{ env.API_SERVER_ZIP_FILE_NAME }}
          asset_content_type: application/gzip

      - name: Upload Forc Index Binary Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.FORC_INDEX_ZIP_FILE_NAME }}
          asset_name: ${{ env.FORC_INDEX_ZIP_FILE_NAME }}
          asset_content_type: application/gzip

      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        # need to find a work-around to be able to run this action on mac
        if: always() && (github.ref == 'refs/heads/master' || github.ref_type == 'tag') && matrix.job.os != 'macos-latest'
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  validation-complete:
    needs:
      - cargo-verifications
    runs-on: ubuntu-latest
    steps:
      - run: true

  notify-slack-on-failure:
    if: ${{ always() }} && github.ref == 'refs/heads/master'
    needs:
      - validation-complete
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack On Failure
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  publish:
    # Only do this job if publishing a release and validations pass.
    needs:
      - publish-fuel-indexer-binaries
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Verify tag version
        run: |
          curl -sSLf "https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-api-server/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-database/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-database/database-types/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-database/postgres/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-database/sqlite/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-lib/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-macros/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-metrics/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-plugin/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-schema/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer-types/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} packages/fuel-indexer/Cargo.toml

      - name: Install WASM target
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Publish crates
        uses: katyo/publish-crates@v1
        with:
          publish-delay: 30000
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Notify Slack On Failure
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  # Deploy Latest Fuel-Indexer Release
  deploy:
    if: github.ref == 'refs/heads/master'
    needs:
      - publish-fuel-indexer-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        run: |
          tag=(`echo $GITHUB_SHA | cut -c1-7`)
          echo "IMAGE_TAG=`echo sha-$tag`" >> $GITHUB_ENV
          echo "DEPLOYMENT_VERSION=$(echo $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Deploy Fuel Indexer
        id: deploy_fuel_indexer
        run: |
          curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
            https://api.github.com/repos/FuelLabs/fuel-deployment/actions/workflows/deploy-fuel-indexer.yml/dispatches \
            -d '{"ref":"master","inputs":{ "k8s-type": "${{ env.K8S }}", "config-directory": "${{ env.CONFIG }}", "config-env": "${{ env.ENV }}", "deployment-version": "${{ env.DEPLOYMENT_VERSION }}", "image-tag": "${{ env.IMAGE_TAG }}" }}'
        env:
          K8S: 'eks'
          CONFIG: 'fuel-dev1'
          ENV: 'fueldevsway.env'
