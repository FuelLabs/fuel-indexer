name: CI

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]

env:
  DATABASE_URL: postgres://postgres:my-secret@localhost:5432
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  REGISTRY: ghcr.io

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  cargo-check-workspace-locked:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        name: Cargo Check Workspace Locked
        with:
          command: check
          args: --locked --workspace --all-features --all-targets
        env:
          RUSTFLAGS: '-D warnings'

  cargo-build-workspace:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        name: Cargo Build Workspace
        with:
          command: build
          args: --locked --workspace --all-features --all-targets
        env:
          RUSTFLAGS: '-D warnings'

  cargo-test-workspace-default-features:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - uses: Swatinem/rust-cache@v1
      - name: Cargo Test Workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --workspace
        env:
          RUSTFLAGS: '-D warnings'

  cargo-test-workspace-no-features:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - uses: Swatinem/rust-cache@v1
      - name: Cargo Test Workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --workspace --no-default-features --all-targets
        env:
          RUSTFLAGS: '-D warnings'

  cargo-test-workspace-all-features:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.62"
      - uses: Swatinem/rust-cache@v1
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - name: Cargo Test Workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --workspace --all-features --all-targets
        env:
          RUSTFLAGS: '-D warnings'

  cargo-fmt-workspace-check:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.62"
      - name: Check Formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  cargo-toml-fmt-check:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.62"
      - uses: Swatinem/rust-cache@v1
      - name: Install Cargo.toml linter
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-toml-lint
          version: '0.1'
      - name: Run Cargo.toml linter
        run: git ls-files | grep Cargo.toml$ | xargs --verbose -n 1 cargo-toml-lint

  cargo-unused-deps-check:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          # `cargo-udeps` requires nightly to run
          toolchain: nightly
          default: true
      - uses: Swatinem/rust-cache@v1
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - name: Install cargo-udeps
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-udeps
      - name: Check Unused Deps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: --locked --all-targets --all-features

  cargo-clippy-workspace:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: my-secret
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.62"
      - uses: Swatinem/rust-cache@v1
      - run: cargo install sqlx-cli
      - run: ./run_migrations.sh
      - name: Check Clippy Linter
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  mdbook-build:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "1.62"
      - uses: Swatinem/rust-cache@v1
      - name: mdbook build
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.4.17'

  mdbook-lint:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: |
          npm install -g markdownlint-cli@0.31.1
          markdownlint --config .markdownlintrc **/*.md docs/src/ 

  publish-docker-image:
    needs: cargo-toml-fmt-check

    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # This is a way to make this job run after publish-crates even if it's skipped on master or pr branches
      # https://stackoverflow.com/a/69252812/680811
      - name: fail if any dependent jobs failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/fuellabs/fuel-indexer
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{raw}}
          flavor: |
            latest=${{ github.ref == 'refs/heads/master' }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the image to ghcr.io
        uses: docker/build-push-action@v2
        with:
          context: .
          file: deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        if: always() && (github.ref == 'refs/heads/master' || github.ref_type == 'tag')
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  validation-complete:
    needs:
      [
        cargo-check-workspace-locked,
        cargo-build-workspace,
        cargo-test-workspace-default-features,
        cargo-test-workspace-no-features,
        cargo-test-workspace-all-features,
        cargo-fmt-workspace-check,
        cargo-toml-fmt-check,
        cargo-clippy-workspace,
        mdbook-build,
      ]
    runs-on: ubuntu-latest
    steps:
      - run: true

  notify-slack-on-failure:
    if: ${{ always() }} && github.ref == 'refs/heads/master'
    needs: validation-complete
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack On Failure
        uses: ravsamhq/notify-slack-action@v1
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

  publish:
    # Only do this job if publishing a release and validations pass.
    needs: validation-complete
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.62"
          override: true
      - name: Verify tag version
        run: |
          curl -sSLf "https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer-api-server/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer-lib/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer-macros/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer-plugin/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer-schema/Cargo.toml
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} fuel-indexer/Cargo.toml
      - name: Publish crate
        uses: katyo/publish-crates@v1
        with:
          publish-delay: 30000
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Notify Slack On Failure
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}
