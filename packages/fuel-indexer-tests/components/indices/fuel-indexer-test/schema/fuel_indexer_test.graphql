type PingEntity @entity {
  id: ID!
  value: UInt8!
  message: Charfield!
}

type PungEntity @entity {
  id: ID!
  value: UInt8!
  is_pung: Boolean!
  pung_from: Identity!
}

type U16Entity @entity {
  id: ID!
  value1: UInt16!
  value2: Int16!
}

type PongEntity @entity {
  id: ID!
  value: UInt8!
}

type BlockEntity @entity {
  id: ID!
  height: UInt4!
  timestamp: Int8!
}

type TxEntity @entity {
  id: ID!
  block: BlockEntity!
  input_data: Json!
  timestamp: Int8!
}

type TransferEntity @entity {
  id: ID!
  contract_id: ContractId!
  # 'to' is a reserved SQL word, so using 'recipient'
  recipient: ContractId!
  amount: UInt8!
  asset_id: AssetId!
}

type TransferOutEntity @entity {
  id: ID!
  contract_id: ContractId!
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
}

type LogEntity @entity {
  id: ID!
  contract_id: ContractId!
  ra: UInt8!
  rb: UInt8!
}

type ScriptResultEntity @entity {
  id: ID!
  result: UInt8!
  gas_used: UInt8!
  blob: Blob!
}

type MessageOutEntity @entity {
  id: ID!
  message_id: MessageId!
  sender: Address!
  recipient: Address!
  amount: UInt8!
  nonce: Nonce!
  len: UInt8!
  digest: Bytes32!
}

type OptionEntity @entity {
  id: ID!
  int_required: UInt8!
  int_optional_some: UInt8
  addr_optional_none: Address
}

type TupleEntity @entity {
  id: ID!
  complex_a: Charfield!
  complex_b: UInt8!
  simple_a: Charfield!
}

type MessageEntity @entity {
  id: ID!
  message: Charfield!
}

type CallEntity @entity {
  id: ID!
  contract_id: ContractId!
  callee: ContractId!
  asset_id: AssetId!
  gas: UInt8!
  fn_name: Charfield!
  amount: UInt8!
}

type PanicEntity @entity {
  id: ID!
  contract_id: ContractId!
  reason: UInt4!
}

type RevertEntity @entity {
  id: ID!
  contract_id: ContractId!
  error_val: UInt8!
}

type Genre @entity {
  id: ID!
  name: Charfield!
}

type Person @entity {
  id: ID!
  name: Charfield!
}

type Planet @entity {
  id: ID!
  name: Charfield!
}

type Continent @entity {
  id: ID!
  name: Charfield!
  planet: Planet!
}

type Country @entity {
  id: ID!
  name: Charfield!
  continent: Continent!
}

type Region @entity {
  id: ID!
  name: Charfield!
  country: Country!
}

type City @entity {
  id: ID!
  name: Charfield!
  region: Region!
}

type Author @entity {
  id: ID!
  name: Charfield!
  genre: Genre!
}

type Library @entity {
  id: ID!
  name: Charfield!
  city: City!
}

type Book @entity {
  id: ID!
  name: Charfield!
  author: Author! @indexed
  library: Library!
  genre: Genre!
}

type Sponsor @entity {
  id: ID!
  name: Charfield! @unique
  amount: UInt8!
  representative: Person!
}

# TODO: Fix nullable foreign keys; there seems to be issues during codegen
type BookClub @entity {
  id: ID!
  book: Book!
  member: Person!
  corporate_sponsor: Sponsor! @join(on: name)
}

type Municipality @entity {
  id: ID!
  name: Charfield! @unique
}

type SportsTeam @entity {
  id: ID!
  name: Charfield!
  municipality: Municipality! @join(on: name)
}

type InnerFilterEntity @entity {
  id: ID!
  inner_foo: Charfield!
  inner_bar: UInt8!
  inner_baz: UInt8!
}

type FilterEntity @entity {
  id: ID!
  foola: Charfield!
  maybe_null_bar: UInt8
  bazoo: UInt8!
  inner_entity: InnerFilterEntity!
}

type EnumError @entity {
  id: ID!
  contract_id: ContractId!
  error_val: UInt8!
}

type ExplorerEntity @entity {
  id: ID!
  nonce: Nonce!
  time: Tai64Timestamp
  hex: HexString
  sig: Signature!
  bytes: Bytes64!
}

enum EnumEntity @entity {
  One
  Two
  Three
}

type ComplexEnumEntity @entity {
  id: ID!
  one: EnumEntity
}

type VirtualEntity @entity(virtual: true) {
  name: Charfield
  size: UInt1!
}

type UsesVirtualEntity @entity {
  id: ID!
  name: Charfield!
  no_table: VirtualEntity!
}

enum UnionType {
  A
  B
  C
}

type IndexableUnionA @entity {
  id: ID!
  a: UInt8!
  union_type: UnionType!
}

type IndexableUnionB @entity {
  id: ID!
  b: UInt8!
  union_type: UnionType!
}

type IndexableUnionC @entity {
  id: ID!
  c: UInt8!
  union_type: UnionType!
}

type VirtualUnionA @entity(virtual: true) {
  a: UInt8!
  union_type: UnionType!
}

type VirtualUnionB @entity(virtual: true) {
  b: UInt8!
  union_type: UnionType!
}

type VirtualUnionC @entity(virtual: true) {
  c: UInt8!
  union_type: UnionType!
}

union IndexableUnionEntity = IndexableUnionA | IndexableUnionB | IndexableUnionC

union VirtualUnionEntity = VirtualUnionA | VirtualUnionB | VirtualUnionC

type VirtualUnionContainerEntity @entity {
  id: ID!
  union_entity: VirtualUnionEntity
  union_type: UnionType!
}

type ListFKType @entity {
  id: ID!
  value: UInt8!
}

type ListTypeEntity @entity {
  id: ID!
  foo: Charfield!
  required_all: [ListFKType!]!
  optional_inner: [Charfield]!
  optional_outer: [UInt8!]
  optional_all: [UInt8]
  virtual_optional_inner: [VirtualEntity]!
  enum_required_all: [EnumEntity!]!
}
