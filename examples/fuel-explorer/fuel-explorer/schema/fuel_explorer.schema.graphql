# https://github.com/FuelLabs/fuel-indexer/issues/897

enum ReceiptLabel {
  Call
  Return
  ReturnData
  Panic
  Revert
  Log
  LogData
  Transfer
  TransferOut
  ScriptResult
  MessageOut
}

enum ConsensusLabel {
  Genesis
  PoA
  Unknown
}

enum InputLabel {
  Coin
  Contract
  Message
}

enum PanicReason {
  Success
  Revert
  OutOfGas
  TransactionValidity
  MemoryOverflow
  ArithmeticOverflow
  ContractNotFound
  MemoryOwnership
  NotEnoughBalance
  ExpectedInternalContext
  AssetIdNotFound
  InputNotFound
  OutputNotFound
  WitnessNotFound
  TransactionMaturity
  InvalidMetadataIdentifier
  MalformedCallStructure
  ReservedRegisterNotWritable
  ErrorFlag
  InvalidImmediateValue
  ExpectedCoinInput
  MaxMemoryAccess
  MemoryWriteOverlap
  ContractNotInInputs
  InternalBalanceOverflow
  ContractMaxSize
  ExpectedUnallocatedStack
  MaxStaticContractsReached
  TransferAmountCannotBeZero
  ExpectedOutputVariable
  ExpectedParentInternalContext
  IllegalJump
  ContractIdAlreadyDeployed
  Unknown
}

enum ScriptExecutionResult {
  Success
  Revert
  Panic
  GenericFailure
}

enum TransactionStatusLabel {
  Submitted
  SqueezedOut
  Failure
  Success
  Unknown
}

enum ReturnType {
  Return
  ReturnData
  Revert
}

enum OutputLabel {
  Coin
  Contract
  Change
  Variable
  ContractCreated
  MessageOutput
  Unknown
}

type Witness {
  data: Blob! @virtual
}

type InstructionResult {
  reason: PanicReason! @virtual
  instruction: UInt4!
}

type ProgramState {
  return_type: ReturnType! @virtual
  data: HexString!
}

type DryRun {
  tx: HexString! @virtual
  utxo_validation: Boolean
}

type TransactionIdFragment {
  id: ID!
  hash: Bytes32!
}

type UtxoId {
  id: ID!
  tx_id: TxId!
  output_index: UInt4!
}

type TxPointer {
  id: ID!
  block_height: BlockHeight!
  tx_index: UInt8!
}

type ContractIdFragment {
  id: ID!
  hash: Bytes32!
}

type BlockIdFragment {
  id: ID!
  hash: Bytes32!
}

type Genesis {
  id: ID!
  chain_config_hash: Bytes32!
  coins_root: Bytes32!
  contracts_root: Bytes32!
  messages_root: Bytes32!
  is_genesis: Boolean!
  label: ConsensusLabel!
}

type PoA {
  id: ID!
  # TODO: Is this important? The fact that signature is different
  # on almost every `PoA` implies that this type might be virtual?
  signature: Signature!
  is_poa: Boolean!
  label: ConsensusLabel!
}

type Unknown {
  id: ID!
  is_unknown: Boolean!
  label: ConsensusLabel!
}

union Consensus = Genesis | PoA | Unknown

type InputCoin {
  id: ID!
  utxo_id: UtxoId!
  owner: Address!
  amount: UInt8!
  asset_id: AssetId!
  tx_pointer: TxPointer!
  witness_index: Int8!
  maturity: UInt8!
  predicate: HexString!
  predicate_data: HexString!
  label: InputLabel!
  is_coin: Boolean!
}

type InputContract {
  id: ID!
  utxo_id: UtxoId!
  balance_root: Bytes32!
  state_root: Bytes32!
  tx_pointer: TxPointer!
  contract: ContractIdFragment!
  label: InputLabel!
  is_contract: Boolean!
}

type InputMessage {
  id: ID!
  sender: Address!
  recipient: Address!
  amount: UInt8!
  nonce: Nonce!
  witness_index: Int8!
  data: HexString!
  predicate: HexString!
  predicate_data: HexString!
  label: InputLabel!
  is_message: Boolean!
}

union Input = InputCoin | InputContract | InputMessage

type StorageSlot {
  id: ID!
  key: Bytes32!
  value: Bytes32!
}

type CallReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  gas: UInt8!
  param1: UInt8!
  param2: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_call: Boolean!
}

type ReturnDataReceipt {
  contract_id: ContractId! @virtual
  ptr: UInt8!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_return_data: Boolean!
}

type PanicReceipt {
  contract_id: ContractId @virtual
  reason: InstructionResult
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_panic: Boolean!
}

type RevertReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_revert: Boolean!
}

type LogReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  rb: UInt8!
  rc: UInt8!
  rd: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_log: Boolean!
}

type LogDataReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  rb: UInt8!
  ptr: UInt8!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_log_data: Boolean!
}

type ReturnReceipt {
  contract_id: ContractId! @virtual
  val: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_return: Boolean!
}

type TransferReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_transfer: Boolean!
}

type TransferOutReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
  label: ReceiptLabel!
  is_transfer_out: Boolean!
}

type ScriptResultReceipt {
  result: ScriptExecutionResult! @virtual
  gas_used: UInt8!
  label: ReceiptLabel!
  is_script_result: Boolean!
}

type MessageOutReceipt {
  sender: Address! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  nonce: Nonce!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
  label: ReceiptLabel!
  is_message_out: Boolean!
}

union Receipt =
    CallReceipt
  | ReturnReceipt
  | ReturnDataReceipt
  | PanicReceipt
  | RevertReceipt
  | LogReceipt
  | LogDataReceipt
  | TransferReceipt
  | TransferOutReceipt
  | ScriptResultReceipt
  | MessageOutReceipt

# `Create` is a reserved word in SQL so we append the suffix `Transaction` to these
# transaction type names.
type CreateTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: UInt8!
  bytecode_length: UInt8!
  bytecode_witness_index: UInt1!
  storage_slots: [StorageSlot!]
  inputs: [Input!]
  outputs: [Output!]
  witnesses: [Witness!]
  salt: Salt!
  metadata: Json
  is_create: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus!
}

type ScriptTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: UInt8!
  script: Blob!
  script_data: Blob!
  inputs: [Input!]
  outputs: [Output!]
  witnesses: [Witness!]
  receipts_root: Bytes32!
  metadata: Json
  is_script: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus!
}

type MintTransaction {
  id: ID!
  tx_pointer: TxPointer!
  outputs: [Output!]
  metadata: Json
  is_mint: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus!
}

union Transaction =
    CreateTransaction
  | ScriptTransaction
  | MintTransaction

type SubmittedStatus {
  id: ID!
  time: UInt8!
  label: TransactionStatusLabel!
  is_submitted: Boolean!
}

type SqueezedOutStatus {
  id: ID!
  reason: Charfield!
  label: TransactionStatusLabel!
  is_squeezed_out: Boolean!
}

type FailureStatus {
  id: ID!
  block: BlockIdFragment!
  time: UInt8!
  reason: Charfield!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_failure: Boolean!
}

type SuccessStatus {
  id: ID!
  time: UInt8!
  block: BlockIdFragment!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_success: Boolean!
}

type UnknownStatus {
  id: ID!
  label: TransactionStatusLabel!
  is_unknown: Boolean!
}

union TransactionStatus =
    SubmittedStatus
  | SqueezedOutStatus
  | FailureStatus
  | SuccessStatus
  | UnknownStatus

type Header {
  id: ID!
  block_id: BlockId!
  da_height: UInt8!
  transactions_count: UInt8!
  message_receipt_count: UInt8!
  transactions_root: Bytes32!
  message_receipt_root: Bytes32!
  height: UInt8!
  prev_root: Bytes32!
  time: Int8!
  application_hash: Bytes32!
}

type Block {
  id: ID!
  block_id: BlockId!
  header: Header!
  consensus: Consensus!
  transactions: [TransactionIdFragment!]
}

type NodeInfo {
  id: ID!
  utxo_validation: Boolean!
  vm_backtrace: Boolean!
  min_gas_price: UInt8!
  max_tx: UInt8!
  max_depth: UInt8!
  node_version: Charfield!
}

type UnknownOutput {
  id: ID!
  label: OutputLabel!
  is_unknown: Boolean!
}

type ContractCreated {
  id: ID!
  contract: ContractIdFragment!
  state_root: Bytes32!
  label: OutputLabel!
  is_contract_created: Boolean!
}

type VariableOutput {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
  is_variable: Boolean!
  label: OutputLabel!
}

type ChangeOutput {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
  is_change: Boolean!
  label: OutputLabel!
}

type ContractOutput {
  id: ID!
  input_index: Int8!
  balance_root: Bytes32!
  state_root: Bytes32!
  is_contract: Boolean!
  label: OutputLabel!
}

type CoinOutput {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
  is_coin: Boolean!
  label: OutputLabel!
}

type MessageOutput {
  id: ID!
  amount: UInt8!
  recipient: Address!
}

union Output =
    CoinOutput
  | ContractOutput
  | ChangeOutput
  | VariableOutput
  | ContractCreated
  | MessageOutput
  | UnknownOutput

type ConsensusParameters {
  id: ID!
  contract_max_size: UInt8!
  max_inputs: UInt8!
  max_outputs: UInt8!
  max_witnesses: UInt8!
  max_gas_per_tx: UInt8!
  max_script_length: UInt8!
  max_script_data_length: UInt8!
  max_storage_slots: UInt8!
  max_predicate_length: UInt8!
  gas_price_factor: UInt8!
  gas_per_byte: UInt8!
  max_message_data_length: UInt8!
  chain_id: UInt8!
}

type ChainInfo {
  id: ID!
  base_chain_height: UInt4!
  name: Charfield!
  peer_count: Int4!
  latest_block: Block!
  consensus_parameters: ConsensusParameters!
}

type Coin {
  id: ID!
  amount: UInt8!
  block_created: UInt4!
  asset_id: AssetId!
  utxo_id: UtxoId!
  maturity: UInt4!
  owner: Address!
}

type MessageCoin {
  id: ID!
  amount: UInt8!
  sender: Address!
  recipient: Address!
  nonce: Nonce!
  da_height: UInt8!
}

type Contract {
  id: ID!
  contract_id: ContractId!
  bytecode: HexString!
  salt: Salt!
}
