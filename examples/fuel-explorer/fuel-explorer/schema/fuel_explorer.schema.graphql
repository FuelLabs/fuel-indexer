# https://github.com/FuelLabs/fuel-indexer/issues/897

type TransactionPointer {
  id: ID!
  block_height: BlockHeight!
  tx_index: UInt4!
}

type TransactionIdFragment {
  id: ID!
}

type UtxoId {
  id: ID!
  tx_id: TxId!
  output_index: UInt4!
}

type TxPointer {
  id: ID!
  block_height: BlockHeight!
  tx_index: UInt8!
}

type ContractIdFragment {
  id: ID!
}

type BlockIdFragment {
  id: ID!
  hash: Bytes32!
}

enum ConsensusLabel {
  Genesis
  PoA
  Unknown
}

type Genesis {
  id: ID!
  chain_config_hash: Bytes32!
  coins_root: Bytes32!
  contracts_root: Bytes32!
  messages_root: Bytes32!
  label: ConsensusLabel!
}

type PoA {
  id: ID!
  signature: Signature!
  label: ConsensusLabel!
}

type Unknown {
  id: ID!
  label: ConsensusLabel!
}

union Consensus = Genesis | PoA | Unknown

type Witness {
  data: Blob! @virtual
}

enum InputLabel {
  Coin
  Contract
  Message
}


type InputCoin {
  id: ID!
  utxo_id: UtxoId!
  owner: Address!
  amount: UInt8!
  asset_id: AssetId!
  tx_pointer: TransactionPointer!
  witness_index: Int8!
  maturity: UInt8!
  predicate: HexString!
  predicate_data: HexString!
  label: InputLabel!
  is_coin: Boolean!
}

type InputContract {
  id: ID!
  utxo_id: UtxoId!
  balance_root: Bytes32!
  state_root: Bytes32!
  tx_pointer: TransactionPointer!
  contract: ContractIdFragment!
  label: InputLabel!
  is_contract: Boolean!
}

type InputMessage {
  id: ID!
  sender: Address!
  recipient: Address!
  amount: UInt8!
  nonce: UInt8!
  witness_index: Int8!
  data: HexString!
  predicate: HexString!
  predicate_data: HexString!
  label: InputLabel!
  is_message: Boolean!
}

union Input =
    InputCoin
  | InputContract
  | InputMessage

type CreateTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: BlockHeight!
  bytecode_length: UInt8!
  bytecode_witness_index: UInt1!
  #   storage_slots: [StorageSlot]!
  #   inputs: [Input]!
  #   outputs: [Output]!
  #   witnesses: [Witness]!
  salt: Salt!
  metadata: Json
  is_create: Boolean!
}

type ScriptTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: BlockHeight!
  script: Blob!
  #   inputs: [Input]!
  #   outputs: [Output]!
  #   witnesses: [Witness]!
  receipts_root: Bytes32!
  metadata: Json
  is_script: Boolean!
}

type MintTransaction {
  id: ID!
  tx_pointer: TransactionPointer!
  #   outputs: [Output]!
  metadata: Json
  is_mint: Boolean!
}

enum TransactionStatusLabel {
  Submitted
  SqueezedOut
  Failure
  Success
  Unknown
}

type SubmittedStatus {
  id: ID!
  time: UInt8!
  label: TransactionStatusLabel!
  is_submitted: Boolean!
}

type SqueezedOutStatus {
  id: ID!
  reason: Charfield!
  label: TransactionStatusLabel!
  is_squeezed_out: Boolean!
}

enum ReturnType {
  Return
  ReturnData
  Revert
}

type ProgramState {
  return_type: ReturnType! @virtual
  data: HexString!
}

type FailureStatus {
  id: ID!
  block: BlockIdFragment!
  time: UInt8!
  reason: Charfield!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_failure: Boolean!
}


type SuccessStatus {
  id: ID!
  time: UInt8!
  block: BlockIdFragment!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_success: Boolean!
}

type UnknownStatus {
  id: ID!
  label: TransactionStatusLabel!
  is_unknown: Boolean!
}

union TransactionStatus =
    SubmittedStatus
  | SqueezedOutStatus
  | FailureStatus
  | SuccessStatus
  | UnknownStatus

type Header {
  id: ID!
  block_id: BlockId!
  da_height: UInt8!
  transactions_count: UInt8!
  message_receipt_count: UInt8!
  transactions_root: Bytes32!
  message_receipt_root: Bytes32!
  height: UInt8!
  prev_root: Bytes32!
  time: Int8!
  application_hash: Bytes32!
}

type Block {
  id: ID!
  block_id: BlockId!
  header: Header!
  # consensus: Consensus!
  #   transactions: [TransactionIdFragment]!
}

type NodeInfo {
  id: ID!
  utxo_validation: Boolean!
  vm_backtrace: Boolean!
  min_gas_price: UInt8!
  max_tx: UInt8!
  max_depth: UInt8!
  node_version: Charfield!
}

type ContractCreated {
  id: ID!
  contract: ContractIdFragment!
  state_root: Bytes32!
}

type VariableOutput {
  id: ID!
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
}

type ChangeOutput {
  id: ID!
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
}

type ContractOutput {
  id: ID!
  input_index: Int8!
  balance_root: Bytes32!
  state_root: Bytes32!
}

type CoinOutput {
  id: ID!
  recipient: Address!
  amount: UInt8!
  asset_id: AssetId!
}

type Output {
  id: ID!
  coin: CoinOutput
  contract: ContractOutput
  change: ChangeOutput
  variable: VariableOutput
  contract_created: ContractCreated
  unknown: Unknown
}

type DryRun {
  tx: HexString! @virtual
  utxo_validation: Boolean
}

type Balance {
  id: ID!
  owner: Address!
  amount: UInt8!
  asset_id: AssetId!
}

type ConsensusParameters {
  id: ID!
  contract_max_size: UInt8!
  max_inputs: UInt8!
  max_outputs: UInt8!
  max_witnesses: UInt8!
  max_gas_per_tx: UInt8!
  max_script_length: UInt8!
  max_script_data_length: UInt8!
  max_storage_slots: UInt8!
  max_predicate_length: UInt8!
  gas_price_factor: UInt8!
  gas_per_byte: UInt8!
  max_message_data_length: UInt8!
  chain_id: UInt8!
}

type ChainInfo {
  id: ID!
  base_chain_height: UInt4!
  name: Charfield!
  peer_count: Int4!
  latest_block: Block!
  consensus_parameters: ConsensusParameters!
}

type Coin {
  id: ID!
  amount: UInt8!
  block_created: UInt4!
  asset_id: AssetId!
  utxo_id: UtxoId!
  maturity: UInt4!
  owner: Address!
}

type MessageCoin {
  id: ID!
  amount: UInt8!
  sender: Address!
  recipient: Address!
  nonce: Nonce!
  da_height: UInt8!
}

# TODO: Remove this
type ContractBalance {
  id: ID!
  contract_id: ContractId!
  amount: UInt8!
  asset_id: AssetId!
}

type Contract {
  id: ID!
  contract_id: ContractId!
  bytecode: HexString!
  salt: Salt!
}

enum PanicReason {
  Success
  Revert
  OutOfGas
  TransactionValidity
  MemoryOverflow
  ArithmeticOverflow
  ContractNotFound
  MemoryOwnership
  NotEnoughBalance
  ExpectedInternalContext
  AssetIdNotFound
  InputNotFound
  OutputNotFound
  WitnessNotFound
  TransactionMaturity
  InvalidMetadataIdentifier
  MalformedCallStructure
  ReservedRegisterNotWritable
  ErrorFlag
  InvalidImmediateValue
  ExpectedCoinInput
  MaxMemoryAccess
  MemoryWriteOverlap
  ContractNotInInputs
  InternalBalanceOverflow
  ContractMaxSize
  ExpectedUnallocatedStack
  MaxStaticContractsReached
  TransferAmountCannotBeZero
  ExpectedOutputVariable
  ExpectedParentInternalContext
  IllegalJump
  ContractIdAlreadyDeployed
  Unknown
}

type InstructionResult {
  reason: PanicReason! @virtual
  instruction: UInt4!
}

type CallReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  gas: UInt8!
  param1: UInt8!
  param2: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type ReturnDataReceipt {
  contract_id: ContractId! @virtual
  ptr: UInt8!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type PanicReceipt {
  contract_id: ContractId @virtual
  reason: InstructionResult
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type RevertReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type LogReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  rb: UInt8!
  rc: UInt8!
  rd: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type LogDataReceipt {
  contract_id: ContractId! @virtual
  ra: UInt8!
  rb: UInt8!
  ptr: UInt8!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type ReturnReceipt {
  contract_id: ContractId! @virtual
  val: UInt8!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type TransferReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

type TransferOutReceipt {
  contract_id: ContractId! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  asset_id: AssetId!
  pc: UInt8!
  # `is` is a reserved keyword in PostgreSQL.
  isr: UInt8!
}

enum ScriptExecutionResult {
  Success
  Revert
  Panic
  GenericFailure
}

type ScriptResultReceipt {
  result: ScriptExecutionResult! @virtual
  gas_used: UInt8!
}

type MessageOutReceipt {
  sender: Address! @virtual
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: UInt8!
  message_id: MessageId!
  nonce: Nonce!
  len: UInt8!
  digest: Bytes32!
  data: Blob!
}

union Receipt =
    CallReceipt
  | ReturnReceipt
  | ReturnDataReceipt
  | PanicReceipt
  | RevertReceipt
  | LogReceipt
  | LogDataReceipt
  | TransferReceipt
  | TransferOutReceipt
  | ScriptResultReceipt
  | MessageOutReceipt
