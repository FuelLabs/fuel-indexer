type ContractIdFragment {
    id: ID!
    contract_id: ContractId!
}

type TxPointer {
    id: ID!
    block_height: BlockHeight!
    tx_index: UInt4!
}

type CreateTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: BlockHeight!
  script: Blob!
#   inputs: [Input]!
#   outputs: [Output]!
#   witnesses: [Witness]!
  receipts_root: Bytes32!
#   metadata: ScriptMetadata
}

type ScriptTransaction {
  id: ID!
  gas_price: UInt8!
  gas_limit: UInt8!
  maturity: BlockHeight!
  script: Blob!
#   inputs: [Input]!
#   outputs: [Output]!
#   witnesses: [Witness]!
  receipts_root: Bytes32!
#   metadata: ScriptMetadata
}


type MintTransaction {
  id: ID!
  tx_pointer: TxPointer!
#   outputs: [Output]!
#   metadata: MintMetadata
}


type Transaction {
    id: ID!
    creates: CreateTransaction
    scripts: ScriptTransaction
    mints: MintTransaction
}

type Header {
    id: ID!
    block_id: BlockId!
    da_height: UInt8!
    transactions_count: UInt8!
    message_receipt_count: UInt8!
    transactions_root: Bytes32!
    message_receipt_root: Bytes32!
    height: UInt8!
    prev_root: Bytes32!
    # time: Tai64Timestamp
    timestamp: Int8
    application_hash: Bytes32
}

# TODO: Should this be a FK?
type Genesis {
    id: ID!
    chain_config_hash: Bytes32!
    coins_root: Bytes32!
    contracts_root: Bytes32!
    messages_root: Bytes32!
}


# TODO: Should this be a FK?
type PoA {
    signature: Signature! @norelation
}

# TODO: Should this be a FK?
type Unknown {
    value: Boolean! @norelation
}

# TODO: Should this be a FK?
type Consensus {
    id: ID!
    genesis: Genesis
    poa: PoA
    unknown: Unknown
    label: Charfield!
}

type TransactionIdFragment {
    id: ID!
    transaction_id: Transaction!
}

type Block {
  id: ID!
  block_id: BlockId!
  header: Header!
  consensus: Consensus!
#   transactions: [TransactionIdFragment]!
}

type UtxoId {
    id: ID!
    tx_id: TxId!
    output_index: UInt4!
}

type NodeInfo {
    id: ID!
    utxo_validation: Boolean!
    vm_backtrace: Boolean!
    min_gas_price: UInt8!
    max_tx: UInt8!
    max_depth: UInt8!
    node_version: Charfield!
}

type ContractCreated {
    id: ID! 
    contract: ContractIdFragment!
    state_root: Bytes32!
}

type VariableOutput {
    id: ID! 
    recipient: Address!
    amount: UInt8!
    asset_id: AssetId!
}

type ChangeOutput {
    id: ID! 
    recipient: Address!
    amount: UInt8!
    asset_id: AssetId!
}

type ContractOutput {
    id: ID!
    input_index: Int8!
    balance_root: Bytes32!
    state_root: Bytes32!
}

type CoinOutput {
    id: ID!
    recipient: Address!
    amount: UInt8!
    asset_id: AssetId!
}

type Output {
    id: ID!
    coin: CoinOutput
    contract: ContractOutput
    change: ChangeOutput
    variable: VariableOutput
    contract_created: ContractCreated
}

type InputMessage {
    id: ID!
    sender: Address!
    recipient: Address!
    amount: UInt8!
    nonce: Nonce!
    witness_index: Int8!
    data: HexString!
    predicate: HexString!
    predicate_data: HexString!
}

type InputContract {
    id: ID!
    utxo_id: UtxoId!
    balance_root: Bytes32!
    state_root: Bytes32!
    tx_pointer: TxPointer!
    contract: ContractIdFragment!
}
