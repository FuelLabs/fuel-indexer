# https://github.com/FuelLabs/fuel-indexer/issues/897

enum ReceiptLabel {
  Call
  Return
  ReturnData
  Panic
  Revert
  Log
  LogData
  Transfer
  TransferOut
  ScriptResult
  MessageOut
}

enum ConsensusLabel {
  Genesis
  PoA
  Unknown
}

enum InputLabel {
  Coin
  Contract
  Message
}

enum PanicReason {
  Success
  Revert
  OutOfGas
  TransactionValidity
  MemoryOverflow
  ArithmeticOverflow
  ContractNotFound
  MemoryOwnership
  NotEnoughBalance
  ExpectedInternalContext
  AssetIdNotFound
  InputNotFound
  OutputNotFound
  WitnessNotFound
  TransactionMaturity
  InvalidMetadataIdentifier
  MalformedCallStructure
  ReservedRegisterNotWritable
  InvalidImmediateValue
  ExpectedCoinInput
  MemoryWriteOverlap
  ContractNotInInputs
  InternalBalanceOverflow
  ContractMaxSize
  ExpectedUnallocatedStack
  MaxStaticContractsReached
  TransferAmountCannotBeZero
  ExpectedOutputVariable
  ExpectedParentInternalContext
  ContractIdAlreadyDeployed
  Unknown
}

enum ScriptExecutionResult {
  Success
  Revert
  Panic
  GenericFailure
}

enum TransactionStatusLabel {
  Submitted
  SqueezedOut
  Failure
  Success
  Unknown
}

enum TransactionLabel {
  Create
  Script
  Mint
}

enum ReturnType {
  Return
  ReturnData
  Revert
}

enum OutputLabel {
  Coin
  Contract
  Change
  Variable
  ContractCreated
  MessageOutput
  Unknown
}

type Witness @entity(virtual: true) {
  data: Bytes!
}

type InstructionResult @entity(virtual: true) {
  reason: PanicReason!
  instruction: U32!
}

type ProgramState @entity(virtual: true) {
  return_type: ReturnType!
  data: Bytes!
}

type DryRun @entity(virtual: true) {
  tx: Bytes!
  utxo_validation: Boolean
}

type TransactionIdFragment @entity {
  id: ID!
  hash: Bytes32! @indexed
}

type UtxoId @entity {
  id: ID!
  tx_id: Bytes32! @indexed
  output_index: U32!
}

type TxPointer @entity {
  id: ID!
  block_height: U32!
  tx_index: U64!
}

type ContractIdFragment @entity {
  id: ID!
  hash: Bytes32! @indexed
}

type BlockIdFragment @entity {
  id: ID!
  hash: Bytes32! @indexed
}

type Genesis @entity {
  id: ID!
  chain_config_hash: Bytes32!
  coins_root: Bytes32!
  contracts_root: Bytes32!
  messages_root: Bytes32!
  is_genesis: Boolean!
  label: ConsensusLabel!
}

type PoA @entity {
  id: ID!
  # TODO: Is this important? The fact that signature is different
  # on almost every `PoA` implies that this type might be virtual?
  signature: Bytes64! @indexed
  is_poa: Boolean!
  label: ConsensusLabel!
}

type Unknown @entity {
  id: ID!
  is_unknown: Boolean!
  label: ConsensusLabel!
}

union Consensus = Genesis | PoA | Unknown

type InputCoin @entity {
  id: ID!
  utxo_id: UtxoId! @indexed
  owner: Address! @indexed
  amount: U64!
  asset_id: AssetId! @indexed
  tx_pointer: TxPointer!
  witness_index: I64!
  maturity: U32!
  predicate: Bytes!
  predicate_data: Bytes!
  label: InputLabel!
  is_coin: Boolean!
}

type InputContract @entity {
  id: ID!
  utxo_id: UtxoId! @indexed
  balance_root: Bytes32!
  state_root: Bytes32!
  tx_pointer: TxPointer!
  contract: ContractIdFragment! @indexed
  label: InputLabel!
  is_contract: Boolean!
}

type InputMessage @entity {
  id: ID!
  sender: Address! @indexed
  recipient: Address! @indexed
  amount: U64!
  nonce: Bytes32!
  witness_index: I64!
  data: Bytes!
  predicate: Bytes!
  predicate_data: Bytes!
  label: InputLabel!
  is_message: Boolean!
}

union Input = InputCoin | InputContract | InputMessage

type StorageSlot @entity {
  id: ID!
  key: Bytes32!
  value: Bytes32!
}

type CallReceipt @entity(virtual: true) {
  contract_id: ContractId!
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: U64!
  asset_id: AssetId!
  gas: U64!
  param1: U64!
  param2: U64!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_call: Boolean!
}

type ReturnDataReceipt @entity(virtual: true) {
  contract_id: ContractId!
  ptr: U64!
  len: U64!
  digest: Bytes32!
  data: Bytes
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_return_data: Boolean!
}

type PanicReceipt @entity(virtual: true) {
  contract_id: ContractId
  reason: InstructionResult
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_panic: Boolean!
}

type RevertReceipt @entity(virtual: true) {
  contract_id: ContractId!
  ra: U64!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_revert: Boolean!
}

type LogReceipt @entity(virtual: true) {
  contract_id: ContractId!
  ra: U64!
  rb: U64!
  rc: U64!
  rd: U64!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_log: Boolean!
}

type LogDataReceipt @entity(virtual: true) {
  contract_id: ContractId!
  ra: U64!
  rb: U64!
  ptr: U64!
  len: U64!
  digest: Bytes32!
  data: Bytes
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_log_data: Boolean!
}

type ReturnReceipt @entity(virtual: true) {
  contract_id: ContractId!
  val: U64!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_return: Boolean!
}

type TransferReceipt @entity(virtual: true) {
  contract_id: ContractId!
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: U64!
  asset_id: AssetId!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_transfer: Boolean!
}

type TransferOutReceipt @entity(virtual: true) {
  contract_id: ContractId!
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: U64!
  asset_id: AssetId!
  pc: U64!
  # `is` is a reserved keyword in PostgreSQL.
  isr: U64!
  label: ReceiptLabel!
  is_transfer_out: Boolean!
}

type ScriptResultReceipt @entity(virtual: true) {
  result: ScriptExecutionResult!
  gas_used: U64!
  label: ReceiptLabel!
  is_script_result: Boolean!
}

type MessageOutReceipt @entity(virtual: true) {
  sender: Address!
  # `recipient` has a different type of different `Reciept` members, so
  # we make it something more generic: `Identity`.
  recipient: Identity!
  amount: U64!
  nonce: Bytes32!
  len: U64!
  digest: Bytes32!
  data: Bytes
  label: ReceiptLabel!
  is_message_out: Boolean!
}

type MintReceipt @entity(virtual: true) {
  sub_id: Bytes32!
  contract_id: ContractId!
  val: U64!
  pc: U64!
  isr: U64!
}


type BurnReceipt @entity(virtual: true) {
  sub_id: Bytes32!
  contract_id: ContractId!
  val: U64!
  pc: U64!
  isr: U64!
}

union Receipt =
    CallReceipt
  | ReturnReceipt
  | ReturnDataReceipt
  | PanicReceipt
  | RevertReceipt
  | LogReceipt
  | LogDataReceipt
  | TransferReceipt
  | TransferOutReceipt
  | ScriptResultReceipt
  | MessageOutReceipt
  | MintReceipt
  | BurnReceipt

type VariableOutput @entity {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address! @indexed
  amount: U64!
  asset_id: AssetId! @indexed
  is_variable: Boolean!
  label: OutputLabel!
}

type ChangeOutput @entity {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address! @indexed
  amount: U64!
  asset_id: AssetId! @indexed
  is_change: Boolean!
  label: OutputLabel!
}

type ContractOutput @entity {
  id: ID!
  input_index: I64!
  balance_root: Bytes32!
  state_root: Bytes32!
  is_contract: Boolean!
  label: OutputLabel!
}

type CoinOutput @entity {
  id: ID!
  # `to` is a reserved keyword in PostgreSQL.
  recipient: Address! @indexed
  amount: U64!
  asset_id: AssetId! @indexed
  is_coin: Boolean!
  label: OutputLabel!
}

type UnknownOutput @entity {
  id: ID!
  is_unknown: Boolean!
  label: OutputLabel!
}

type ContractCreated @entity {
  id: ID!
  contract: ContractIdFragment! @indexed
  state_root: Bytes32!
  is_contract_created: Boolean!
  label: OutputLabel!
}

type MessageOutput @entity {
  id: ID!
  amount: U64!
  recipient: Address! @indexed
}

union Output =
    CoinOutput
  | ContractOutput
  | ChangeOutput
  | VariableOutput
  | ContractCreated
  | MessageOutput
  | UnknownOutput

# `Create` is a reserved word in SQL so we append the suffix `Transaction` to these
# transaction type names.
type CreateTransaction @entity {
  id: ID!
  gas_price: U64!
  maturity: U32!
  bytecode_length: U64!
  bytecode_witness_index: U8!
  storage_slots: [StorageSlot!]
  inputs: [Input!]
  outputs: [Output!]
  witnesses: [Witness!]
  salt: Bytes32!
  metadata: Json
  is_create: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus! @indexed
  label: TransactionLabel!
}

type ScriptTransaction @entity {
  id: ID!
  gas_price: U64!
  maturity: U32!
  script: Bytes!
  script_data: Bytes!
  inputs: [Input!]
  outputs: [Output!]
  witnesses: [Witness!]
  receipts_root: Bytes32!
  metadata: Json
  is_script: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus! @indexed
  label: TransactionLabel!
}

type MintTransaction @entity {
  id: ID!
  tx_pointer: TxPointer!
  metadata: Json
  is_mint: Boolean!
  receipts: [Receipt!]
  status: TransactionStatus! @indexed
  label: TransactionLabel!
}

union Transaction = CreateTransaction | ScriptTransaction | MintTransaction

type SubmittedStatus @entity {
  id: ID!
  time: U64!
  label: TransactionStatusLabel!
  is_submitted: Boolean!
}

type SqueezedOutStatus @entity {
  id: ID!
  reason: String!
  label: TransactionStatusLabel!
  is_squeezed_out: Boolean!
}

type FailureStatus @entity {
  id: ID!
  block: BlockIdFragment!
  time: U64!
  reason: String!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_failure: Boolean!
}

type SuccessStatus @entity {
  id: ID!
  time: U64!
  block: BlockIdFragment!
  program_state: ProgramState
  label: TransactionStatusLabel!
  is_success: Boolean!
}

type UnknownStatus @entity {
  id: ID!
  label: TransactionStatusLabel!
  is_unknown: Boolean!
}

union TransactionStatus =
    SubmittedStatus
  | SqueezedOutStatus
  | FailureStatus
  | SuccessStatus
  | UnknownStatus

type Header @entity {
  id: ID!
  block_id: Bytes32!
  da_height: U64!
  transactions_count: U64!
  message_receipt_count: U64!
  transactions_root: Bytes32!
  message_receipt_root: Bytes32!
  height: U32!
  prev_root: Bytes32!
  time: I64!
  application_hash: Bytes32!
}

type Block @entity {
  id: ID!
  block_id: Bytes32! @indexed
  header: Header! @indexed
  consensus: Consensus!
  transactions: [TransactionIdFragment!]
}

type NodeInfo @entity {
  id: ID!
  utxo_validation: Boolean!
  vm_backtrace: Boolean!
  min_gas_price: U64!
  max_tx: U64!
  max_depth: U64!
  node_version: String!
}

type ConsensusParameters @entity {
  id: ID!
  contract_max_size: U64!
  max_inputs: U64!
  max_outputs: U64!
  max_witnesses: U64!
  max_gas_per_tx: U64!
  max_script_length: U64!
  max_script_data_length: U64!
  max_storage_slots: U64!
  max_predicate_length: U64!
  gas_price_factor: U64!
  gas_per_byte: U64!
  max_message_data_length: U64!
  chain_id: U64!
}

type ChainInfo @entity {
  id: ID!
  base_chain_height: U32!
  name: String!
  peer_count: I32!
  latest_block: Block!
  consensus_parameters: ConsensusParameters!
}

type Coin @entity {
  id: ID!
  amount: U64!
  block_created: U32!
  asset_id: AssetId! @indexed
  utxo_id: UtxoId! @indexed
  maturity: U32!
  owner: Address! @indexed
}

type MessageCoin @entity {
  id: ID!
  amount: U64!
  sender: Address! @indexed
  recipient: Address! @indexed
  nonce: Bytes32!
  da_height: U64!
}

type Contract @entity {
  id: ID!
  contract_id: ContractId! @indexed
  bytecode: Bytes!
  salt: Bytes32!
}
